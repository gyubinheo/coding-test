# DFS(Depth First Search) : 깊이 우선 탐색.
# 트리나 그래프에서 한 루트로 탐색하다가 특정 상황에서 최대한 깊숙이 들어가서 확인한 뒤 다시 돌아가 다른 루트로 탐색하는 방식.
# 대표적으로 백트래킹에 사용. 일반적으로 재귀호출을 사용하여 구현하지만, 단순한 스택 배열로 구현하기도 한다. 구조상 스택 오버플로우를 유의.

# 장점
# 현 경로상의 노드를 기억하기 때문에 적은 메모리를 사용한다.
# 찾으려는 노드가 깊은 단계에 있는 경우 BFS 보다 빠르게 찾을 수 있다.

# 단점
# 해가 없는 경로를 탐색 할 경우 단계가 끝날 때까지 탐색한다.
# > 효율성을 높이기 위해서 미리 지정한 임의 깊이까지만 탐색하고 해를 발견하지 못하면 빠져나와 다른 경로를 탐색하는 방법을 사용.
# 해에 도착하면 탐색을 종료하기 때문에 DFS를 통해서 얻어진 해가 최단 경로라는 보장이 없다.


def dfs(v):
    # v 방문
    visited[v] = True
    print(v, end=" ")
    # v의 인접 노드 확인
    for i in graph[v]:
        # i에 방문하지 않았으면
        if not visited[i]:
            # i 방문
            dfs(i)


graph = [
    [],  # 0
    [2, 4, 8],  # 1
    [1, 3],  # 2
    [2],  # 3
    [1, 5, 7],  # 4
    [4, 6],  # 5
    [5],  # 6
    [4],  # 7
    [1, 9],  # 8
    [8],  # 9
]
visited = [False] * 10

dfs(1)
